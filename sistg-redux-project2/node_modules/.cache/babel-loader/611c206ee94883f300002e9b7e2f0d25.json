{"ast":null,"code":"import { FETCH_NEWS, FETCH_RECIPE } from \"./types\";\nimport axios from 'axios'; // [fetchNews]\n\nexport const fetchNews = fd => dispatch => {\n  // dispatch: reducer에게 값을 전달 (xxReducer.js의 function을 자동호출함)\n  // =====> reducer: state 값을 변경함.\n  // ===> store: 변경된 state 값을 저장함.\n  axios.get('http://localhost:3355/news', {\n    params: {\n      fd: fd\n    }\n  }).then(news => dispatch({\n    type: FETCH_NEWS,\n    // type: Java에서의 @RequestMapping(\"/news.do\")와 동일한 역할\n    payload: news.data // reducer는 type이 FETCH_NEWS 일 때, payload값인 news.data 값을 저장한다.\n\n  }));\n};\n/* [전체 Flow]\r\n   1. React Component: 화면 UI. 이벤트 발생(ex. 클릭)\r\n   2. Action:\r\n     - actions 폴더의 foodAction.js\r\n     - 이벤트가 발생하면 데이터를 읽고, (axios 라이브러리 사용해서 유저가 입력한 검색어 'fd'를 받았음)\r\n       ★dispatch★ 함수를 사용해서 값을 채우고, ★reducer에게 값을 전달함★ (xxReducer.js의 function을 자동호출함)\r\n   3. Reducer: state값을 변경함.\r\n     - foodReducer.js 파일.\r\n     - foodAction.js 파일로부터 값을 전달받음.\r\n     - function(stae,action) 을 갖고 있는데, action에 dispatch가 보내준 값 (위의 경우에는 type, payload)을 갖고 있다.\r\n     - reducers 폴더의 ..Reducer.js 파일에서 ★★state 값을 변경함★★\r\n   4. 변경된 state 값을 저장.\r\n     - 클라이언트에게 state를 넘겨줌 ==> 데이터 출력\r\n   ※ state: 값을 싣는다. ==> Java에서의 request와 비슷한 역할.\r\n */\n\n/* [선생님 설명]\r\n - Redux는 프론트계의 MVC 구조이다.\r\n - Spring MVC 구조와 React의 Redux는 아래와 같이 매칭된다.\r\n   JSP ===> DispatcherServlet ===> @RequestMapping ===> DAO ===> request\r\n   React ===> store ===> action ===> reducer ===> state\r\n */","map":{"version":3,"sources":["C:/Users/sist/WebstormProjects/sistg-redux-project2/sistg-redux-project2/src/actions/foodActions.js"],"names":["FETCH_NEWS","FETCH_RECIPE","axios","fetchNews","fd","dispatch","get","params","then","news","type","payload","data"],"mappings":"AAAA,SAAQA,UAAR,EAAmBC,YAAnB,QAAsC,SAAtC;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,OAAO,MAAMC,SAAS,GAAEC,EAAD,IAAMC,QAAQ,IAAE;AACnC;AACA;AACA;AACAH,EAAAA,KAAK,CAACI,GAAN,CAAU,4BAAV,EAAuC;AACnCC,IAAAA,MAAM,EAAC;AACHH,MAAAA,EAAE,EAACA;AADA;AAD4B,GAAvC,EAIGI,IAJH,CAIQC,IAAI,IAAEJ,QAAQ,CAAC;AACnBK,IAAAA,IAAI,EAACV,UADc;AACF;AACjBW,IAAAA,OAAO,EAACF,IAAI,CAACG,IAFM,CAGnB;;AAHmB,GAAD,CAJtB;AASH,CAbM;AAeP;;;;;;;;;;;;;;;;AAiBA","sourcesContent":["import {FETCH_NEWS,FETCH_RECIPE} from \"./types\";\r\nimport axios from 'axios';\r\n\r\n// [fetchNews]\r\nexport const fetchNews=(fd)=>dispatch=>{\r\n    // dispatch: reducer에게 값을 전달 (xxReducer.js의 function을 자동호출함)\r\n    // =====> reducer: state 값을 변경함.\r\n    // ===> store: 변경된 state 값을 저장함.\r\n    axios.get('http://localhost:3355/news',{\r\n        params:{\r\n            fd:fd\r\n        }\r\n    }).then(news=>dispatch({\r\n        type:FETCH_NEWS, // type: Java에서의 @RequestMapping(\"/news.do\")와 동일한 역할\r\n        payload:news.data\r\n        // reducer는 type이 FETCH_NEWS 일 때, payload값인 news.data 값을 저장한다.\r\n    }))\r\n}\r\n\r\n/* [전체 Flow]\r\n   1. React Component: 화면 UI. 이벤트 발생(ex. 클릭)\r\n   2. Action:\r\n     - actions 폴더의 foodAction.js\r\n     - 이벤트가 발생하면 데이터를 읽고, (axios 라이브러리 사용해서 유저가 입력한 검색어 'fd'를 받았음)\r\n       ★dispatch★ 함수를 사용해서 값을 채우고, ★reducer에게 값을 전달함★ (xxReducer.js의 function을 자동호출함)\r\n   3. Reducer: state값을 변경함.\r\n     - foodReducer.js 파일.\r\n     - foodAction.js 파일로부터 값을 전달받음.\r\n     - function(stae,action) 을 갖고 있는데, action에 dispatch가 보내준 값 (위의 경우에는 type, payload)을 갖고 있다.\r\n     - reducers 폴더의 ..Reducer.js 파일에서 ★★state 값을 변경함★★\r\n   4. 변경된 state 값을 저장.\r\n     - 클라이언트에게 state를 넘겨줌 ==> 데이터 출력\r\n   ※ state: 값을 싣는다. ==> Java에서의 request와 비슷한 역할.\r\n */\r\n\r\n\r\n/* [선생님 설명]\r\n - Redux는 프론트계의 MVC 구조이다.\r\n - Spring MVC 구조와 React의 Redux는 아래와 같이 매칭된다.\r\n   JSP ===> DispatcherServlet ===> @RequestMapping ===> DAO ===> request\r\n   React ===> store ===> action ===> reducer ===> state\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}